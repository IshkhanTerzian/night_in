{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ioter\\\\OneDrive\\\\Desktop\\\\projects\\\\night_in\\\\frontend\\\\src\\\\components\\\\MetricsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Button, Row, Col } from \"react-bootstrap\";\nimport { barXAxisLabels } from \"../data/data\";\nimport axios from \"axios\";\nimport BarGraph from \"./BarGraph\";\nimport \"../styles/MetricsPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MetricsPage() {\n  _s();\n  // An array to hold the data needed to be used by the BarGraph\n  const [graphData, setGraphData] = useState([]);\n\n  // Title of the Bar Graph\n  const [graphTitle, setGraphTitle] = useState(\"Total Registered Users\");\n\n  // X-title of the Bar Graph\n  const [graphXLabel, setGraphXLabel] = useState(\"Months\");\n\n  // Y-title of the Bar Graph\n  const [graphYLabel, setGraphYLabel] = useState(\"User Account Creations\");\n\n  // Variable to hold the month with the highest count of users\n  const [highestMonth, setHighestMonth] = useState(\"\");\n\n  // Variable to hold the counter of the highest month\n  const [highestMonthCount, setHighestMonthCount] = useState(0);\n\n  // Variable to hold the most searched cocktail\n  const [mostSearchedCocktail, setMostSearchedCocktail] = useState(\"\");\n\n  // Variable to hold the counter of the most searched cocktail\n  const [mostSearchedCounter, setMostSearchedCounter] = useState(0);\n\n  // Variable to hold the most user searched cocktail\n  const [mostUserSearchedCocktail, setUserMostSearchedCocktail] = useState(\"\");\n\n  // Variable to hold the counter of the most user searched cocktail\n  const [mostUserSearchedCounter, setUserMostSearchedCounter] = useState(0);\n\n  // Variable to hold the most threads\n  const [mostThreads, setMostThreads] = useState(\"\");\n\n  // Variable to hold the counter of the most threads\n  const [mostThreadCount, setMostThreadCount] = useState(0);\n\n  // Variable to hold the metric selection\n  const [selectedMetric, setSelectedMetric] = useState(null);\n\n  /**\r\n   * Fetch total active users and update graph data\r\n   */\n  const fetchTotalActiveUsers = () => {\n    axios.get(\"http://localhost:3001/totalActiveUsers\").then(response => {\n      const creationDates = response.data.creationDates;\n      const monthsInOrder = barXAxisLabels;\n      const userCountByMonth = new Array(12).fill(0);\n      creationDates.forEach(date => {\n        const monthIndex = new Date(date).getMonth();\n        userCountByMonth[monthIndex]++;\n      });\n      const updatedGraphData = monthsInOrder.map((monthName, index) => ({\n        label: monthName,\n        value: userCountByMonth[index] || 0\n      }));\n      const maxUserCreations = Math.max(...userCountByMonth);\n      const highestMonthIndex = userCountByMonth.indexOf(maxUserCreations);\n      const highestMonthName = monthsInOrder[highestMonthIndex];\n      setGraphData(updatedGraphData);\n      setGraphTitle(\"Total Registered Users\");\n      setGraphXLabel(\"Months\");\n      setGraphYLabel(\"User Account Creations\");\n      setHighestMonth(highestMonthName);\n      setHighestMonthCount(maxUserCreations);\n      setSelectedMetric(\"Total Registered Users\");\n    }).catch(error => {\n      console.error(\"Error fetching total active users:\", error);\n    });\n  };\n\n  /**\r\n   * Fetch most searched base cocktail and update graph data\r\n   */\n  const mostBaseCocktailSearched = () => {\n    axios.get(\"http://localhost:3001/mostBaseCocktailSearched\").then(response => {\n      const cocktailData = response.data;\n      const baseCocktails = {};\n      cocktailData.forEach(item => {\n        const cocktailName = item.CocktailName;\n        const searchedCounter = item.SearchedCounter || 0;\n        if (cocktailName) {\n          if (baseCocktails[cocktailName]) {\n            baseCocktails[cocktailName] += searchedCounter;\n          } else {\n            baseCocktails[cocktailName] = searchedCounter;\n          }\n        }\n      });\n      let mostSearchedCocktail = \"\";\n      let mostSearchedCounter = 0;\n      for (const cocktailName in baseCocktails) {\n        if (baseCocktails.hasOwnProperty(cocktailName)) {\n          const counter = baseCocktails[cocktailName];\n          if (counter > mostSearchedCounter) {\n            mostSearchedCounter = counter;\n            mostSearchedCocktail = cocktailName;\n          }\n        }\n      }\n      const graphData = Object.keys(baseCocktails).map(cocktailName => ({\n        label: cocktailName,\n        value: baseCocktails[cocktailName]\n      }));\n      setGraphData(graphData);\n      setGraphTitle(\"Most Searched Base Cocktail Recipes\");\n      setGraphXLabel(\"Cocktails\");\n      setGraphYLabel(\"Number of times Searched\");\n      setMostSearchedCocktail(mostSearchedCocktail);\n      setMostSearchedCounter(mostSearchedCounter);\n      setSelectedMetric(\"Most Searched Base Cocktail Recipes\");\n    }).catch(error => {\n      console.error(\"Error fetching most searched base cocktail:\", error);\n    });\n  };\n\n  /**\r\n   * Fetch most searched user cocktail and update graph data\r\n   */\n  const mostUserCocktailSearched = () => {\n    axios.get(\"http://localhost:3001/mostUserSearchedCocktails\").then(response => {\n      const cocktailData = response.data;\n      const useCocktails = {};\n      cocktailData.forEach(item => {\n        const cocktailName = item.CocktailName;\n        const searchedCounter = item.SearchedCounter || 0;\n        if (cocktailName) {\n          if (useCocktails[cocktailName]) {\n            useCocktails[cocktailName] += searchedCounter;\n          } else {\n            useCocktails[cocktailName] = searchedCounter;\n          }\n        }\n      });\n      let mostUserSearchedCocktail = \"\";\n      let mostUserSearchedCounter = 0;\n      for (const cocktailName in useCocktails) {\n        if (useCocktails.hasOwnProperty(cocktailName)) {\n          const counter = useCocktails[cocktailName];\n          if (counter > mostUserSearchedCounter) {\n            mostUserSearchedCounter = counter;\n            mostUserSearchedCocktail = cocktailName;\n          }\n        }\n      }\n      const graphData = Object.keys(useCocktails).map(cocktailName => ({\n        label: cocktailName,\n        value: useCocktails[cocktailName]\n      }));\n      setGraphData(graphData);\n      setGraphTitle(\"Most Searched User Cocktail Recipes\");\n      setGraphXLabel(\"Cocktails\");\n      setGraphYLabel(\"Number of times Searched\");\n      setUserMostSearchedCocktail(mostUserSearchedCocktail);\n      setUserMostSearchedCounter(mostUserSearchedCounter);\n      setSelectedMetric(\"Most Searched User Cocktail Recipes\");\n    }).catch(error => {\n      console.error(\"Error fetching most searched user cocktail:\", error);\n    });\n  };\n\n  /**\r\n   * Fetch most commented thread and update graph data\r\n   */\n  const mostCommentedThread = () => {\n    axios.get(\"http://localhost:3001/mostCommentedThread\").then(response => {\n      const threadData = response.data;\n      const threads = {};\n      threadData.forEach(item => {\n        const threadTitle = item.TopicTitle;\n        const threadCounter = item.NumberOfReplies || 0;\n        if (threadTitle) {\n          if (threads[threadTitle]) {\n            threads[threadTitle] += threadCounter;\n          } else {\n            threads[threadTitle] = threadCounter;\n          }\n        }\n      });\n      let thread = \"\";\n      let threadCount = 0;\n      for (const threadTitle in threads) {\n        if (threads.hasOwnProperty(threadTitle)) {\n          const counter = threads[threadTitle];\n          if (counter > threadCount) {\n            threadCount = counter;\n            thread = threadTitle;\n          }\n        }\n      }\n      const graphData = Object.keys(threads).map(threadTitle => ({\n        label: threadTitle,\n        value: threads[threadTitle]\n      }));\n      setGraphData(graphData);\n      setGraphTitle(\"Most Commented Thread Posts\");\n      setGraphXLabel(\"Thread Title\");\n      setGraphYLabel(\"Number of times Commented\");\n      setMostThreads(thread);\n      setMostThreadCount(threadCount);\n      setSelectedMetric(\"Most Commented Thread\");\n    }).catch(error => {\n      console.error(\"Error fetching total active users:\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      className: \"mt-4 mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mt-4 mb-4\",\n        children: \"Select a Metric\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"mb-2\",\n            onClick: fetchTotalActiveUsers,\n            children: \"Total Registered Users\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"mb-2\",\n            onClick: mostBaseCocktailSearched,\n            children: \"Most Searched Base Cocktail Recipe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"mb-2\",\n            onClick: mostUserCocktailSearched,\n            children: \"Most Searched User Cocktail Recipe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"mb-2\",\n            onClick: mostCommentedThread,\n            children: \"Most Commented Thread\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(BarGraph, {\n        graphData: graphData,\n        title: graphTitle,\n        xLabel: graphXLabel,\n        yLabel: graphYLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"text-center mt-4 mb-4\",\n      children: [selectedMetric === \"Total Registered Users\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"fs-1\",\n          children: [\"Month with the highest user account creations:\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"fw-bold fs-1 bold-text margin-left-10\",\n            children: highestMonth\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"fs-1\",\n          children: [\"Count:\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"fw-bold fs-1 bold-text margin-left-10\",\n            children: highestMonthCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), selectedMetric === \"Most Searched Base Cocktail Recipes\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"fs-1\",\n          children: [\"Most Searched Base Cocktail Recipe:\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"fw-bold fs-1 bold-text margin-left-10\",\n            children: mostSearchedCocktail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"fs-1\",\n          children: [\"Count:\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"fw-bold fs-1 bold-text margin-left-10\",\n            children: mostSearchedCounter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), selectedMetric === \"Most Searched User Cocktail Recipes\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"fs-1\",\n          children: [\"Most Searched User Cocktail Recipe:\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"fw-bold fs-1 bold-text margin-left-10\",\n            children: mostUserSearchedCocktail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"fs-1\",\n          children: [\"Count:\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"fw-bold fs-1 bold-text margin-left-10\",\n            children: mostUserSearchedCounter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), selectedMetric === \"Most Commented Thread\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"fs-1\",\n          children: [\"Highest commented Thread Title:\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"fw-bold fs-1 bold-text margin-left-10\",\n            children: mostThreads\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"fs-1\",\n          children: [\"Number of times commented:\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"fw-bold fs-1 bold-text margin-left-10\",\n            children: mostThreadCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(MetricsPage, \"uWi0h6ltfyaFXkPSXB8d8OvRWJA=\");\n_c = MetricsPage;\nexport default MetricsPage;\nvar _c;\n$RefreshReg$(_c, \"MetricsPage\");","map":{"version":3,"names":["React","useState","Container","Button","Row","Col","barXAxisLabels","axios","BarGraph","jsxDEV","_jsxDEV","Fragment","_Fragment","MetricsPage","_s","graphData","setGraphData","graphTitle","setGraphTitle","graphXLabel","setGraphXLabel","graphYLabel","setGraphYLabel","highestMonth","setHighestMonth","highestMonthCount","setHighestMonthCount","mostSearchedCocktail","setMostSearchedCocktail","mostSearchedCounter","setMostSearchedCounter","mostUserSearchedCocktail","setUserMostSearchedCocktail","mostUserSearchedCounter","setUserMostSearchedCounter","mostThreads","setMostThreads","mostThreadCount","setMostThreadCount","selectedMetric","setSelectedMetric","fetchTotalActiveUsers","get","then","response","creationDates","data","monthsInOrder","userCountByMonth","Array","fill","forEach","date","monthIndex","Date","getMonth","updatedGraphData","map","monthName","index","label","value","maxUserCreations","Math","max","highestMonthIndex","indexOf","highestMonthName","catch","error","console","mostBaseCocktailSearched","cocktailData","baseCocktails","item","cocktailName","CocktailName","searchedCounter","SearchedCounter","hasOwnProperty","counter","Object","keys","mostUserCocktailSearched","useCocktails","mostCommentedThread","threadData","threads","threadTitle","TopicTitle","threadCounter","NumberOfReplies","thread","threadCount","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","xLabel","yLabel","_c","$RefreshReg$"],"sources":["C:/Users/ioter/OneDrive/Desktop/projects/night_in/frontend/src/components/MetricsPage.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Container, Button, Row, Col } from \"react-bootstrap\";\r\nimport { barXAxisLabels } from \"../data/data\";\r\nimport axios from \"axios\";\r\n\r\nimport BarGraph from \"./BarGraph\";\r\nimport \"../styles/MetricsPage.css\"\r\n\r\nfunction MetricsPage() {\r\n  // An array to hold the data needed to be used by the BarGraph\r\n  const [graphData, setGraphData] = useState([]);\r\n\r\n  // Title of the Bar Graph\r\n  const [graphTitle, setGraphTitle] = useState(\"Total Registered Users\");\r\n\r\n  // X-title of the Bar Graph\r\n  const [graphXLabel, setGraphXLabel] = useState(\"Months\");\r\n\r\n  // Y-title of the Bar Graph\r\n  const [graphYLabel, setGraphYLabel] = useState(\"User Account Creations\");\r\n\r\n  // Variable to hold the month with the highest count of users\r\n  const [highestMonth, setHighestMonth] = useState(\"\");\r\n\r\n  // Variable to hold the counter of the highest month\r\n  const [highestMonthCount, setHighestMonthCount] = useState(0);\r\n\r\n  // Variable to hold the most searched cocktail\r\n  const [mostSearchedCocktail, setMostSearchedCocktail] = useState(\"\");\r\n\r\n  // Variable to hold the counter of the most searched cocktail\r\n  const [mostSearchedCounter, setMostSearchedCounter] = useState(0);\r\n\r\n  // Variable to hold the most user searched cocktail\r\n  const [mostUserSearchedCocktail, setUserMostSearchedCocktail] = useState(\"\");\r\n\r\n  // Variable to hold the counter of the most user searched cocktail\r\n  const [mostUserSearchedCounter, setUserMostSearchedCounter] = useState(0);\r\n\r\n  // Variable to hold the most threads\r\n  const [mostThreads, setMostThreads] = useState(\"\");\r\n\r\n  // Variable to hold the counter of the most threads\r\n  const [mostThreadCount, setMostThreadCount] = useState(0);\r\n\r\n  // Variable to hold the metric selection\r\n  const [selectedMetric, setSelectedMetric] = useState(null);\r\n\r\n  /**\r\n   * Fetch total active users and update graph data\r\n   */\r\n  const fetchTotalActiveUsers = () => {\r\n    axios\r\n      .get(\"http://localhost:3001/totalActiveUsers\")\r\n      .then((response) => {\r\n        const creationDates = response.data.creationDates;\r\n\r\n        const monthsInOrder = barXAxisLabels;\r\n\r\n        const userCountByMonth = new Array(12).fill(0);\r\n\r\n        creationDates.forEach((date) => {\r\n          const monthIndex = new Date(date).getMonth();\r\n          userCountByMonth[monthIndex]++;\r\n        });\r\n\r\n        const updatedGraphData = monthsInOrder.map((monthName, index) => ({\r\n          label: monthName,\r\n          value: userCountByMonth[index] || 0,\r\n        }));\r\n\r\n        const maxUserCreations = Math.max(...userCountByMonth);\r\n        const highestMonthIndex = userCountByMonth.indexOf(maxUserCreations);\r\n        const highestMonthName = monthsInOrder[highestMonthIndex];\r\n\r\n        setGraphData(updatedGraphData);\r\n        setGraphTitle(\"Total Registered Users\");\r\n        setGraphXLabel(\"Months\");\r\n        setGraphYLabel(\"User Account Creations\");\r\n        setHighestMonth(highestMonthName);\r\n        setHighestMonthCount(maxUserCreations);\r\n\r\n        setSelectedMetric(\"Total Registered Users\");\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching total active users:\", error);\r\n      });\r\n  };\r\n\r\n  /**\r\n   * Fetch most searched base cocktail and update graph data\r\n   */\r\n  const mostBaseCocktailSearched = () => {\r\n    axios\r\n      .get(\"http://localhost:3001/mostBaseCocktailSearched\")\r\n      .then((response) => {\r\n        const cocktailData = response.data;\r\n\r\n        const baseCocktails = {};\r\n\r\n        cocktailData.forEach((item) => {\r\n          const cocktailName = item.CocktailName;\r\n          const searchedCounter = item.SearchedCounter || 0;\r\n\r\n          if (cocktailName) {\r\n            if (baseCocktails[cocktailName]) {\r\n              baseCocktails[cocktailName] += searchedCounter;\r\n            } else {\r\n              baseCocktails[cocktailName] = searchedCounter;\r\n            }\r\n          }\r\n        });\r\n\r\n        let mostSearchedCocktail = \"\";\r\n        let mostSearchedCounter = 0;\r\n        for (const cocktailName in baseCocktails) {\r\n          if (baseCocktails.hasOwnProperty(cocktailName)) {\r\n            const counter = baseCocktails[cocktailName];\r\n            if (counter > mostSearchedCounter) {\r\n              mostSearchedCounter = counter;\r\n              mostSearchedCocktail = cocktailName;\r\n            }\r\n          }\r\n        }\r\n\r\n        const graphData = Object.keys(baseCocktails).map((cocktailName) => ({\r\n          label: cocktailName,\r\n          value: baseCocktails[cocktailName],\r\n        }));\r\n\r\n        setGraphData(graphData);\r\n        setGraphTitle(\"Most Searched Base Cocktail Recipes\");\r\n        setGraphXLabel(\"Cocktails\");\r\n        setGraphYLabel(\"Number of times Searched\");\r\n\r\n        setMostSearchedCocktail(mostSearchedCocktail);\r\n        setMostSearchedCounter(mostSearchedCounter);\r\n        setSelectedMetric(\"Most Searched Base Cocktail Recipes\");\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching most searched base cocktail:\", error);\r\n      });\r\n  };\r\n\r\n  /**\r\n   * Fetch most searched user cocktail and update graph data\r\n   */\r\n  const mostUserCocktailSearched = () => {\r\n    axios\r\n      .get(\"http://localhost:3001/mostUserSearchedCocktails\")\r\n      .then((response) => {\r\n        const cocktailData = response.data;\r\n\r\n        const useCocktails = {};\r\n\r\n        cocktailData.forEach((item) => {\r\n          const cocktailName = item.CocktailName;\r\n          const searchedCounter = item.SearchedCounter || 0;\r\n\r\n          if (cocktailName) {\r\n            if (useCocktails[cocktailName]) {\r\n              useCocktails[cocktailName] += searchedCounter;\r\n            } else {\r\n              useCocktails[cocktailName] = searchedCounter;\r\n            }\r\n          }\r\n        });\r\n\r\n        let mostUserSearchedCocktail = \"\";\r\n        let mostUserSearchedCounter = 0;\r\n        for (const cocktailName in useCocktails) {\r\n          if (useCocktails.hasOwnProperty(cocktailName)) {\r\n            const counter = useCocktails[cocktailName];\r\n            if (counter > mostUserSearchedCounter) {\r\n              mostUserSearchedCounter = counter;\r\n              mostUserSearchedCocktail = cocktailName;\r\n            }\r\n          }\r\n        }\r\n\r\n        const graphData = Object.keys(useCocktails).map((cocktailName) => ({\r\n          label: cocktailName,\r\n          value: useCocktails[cocktailName],\r\n        }));\r\n\r\n        setGraphData(graphData);\r\n        setGraphTitle(\"Most Searched User Cocktail Recipes\");\r\n        setGraphXLabel(\"Cocktails\");\r\n        setGraphYLabel(\"Number of times Searched\");\r\n\r\n        setUserMostSearchedCocktail(mostUserSearchedCocktail);\r\n        setUserMostSearchedCounter(mostUserSearchedCounter);\r\n        setSelectedMetric(\"Most Searched User Cocktail Recipes\");\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching most searched user cocktail:\", error);\r\n      });\r\n  };\r\n\r\n  /**\r\n   * Fetch most commented thread and update graph data\r\n   */\r\n  const mostCommentedThread = () => {\r\n    axios\r\n      .get(\"http://localhost:3001/mostCommentedThread\")\r\n      .then((response) => {\r\n        const threadData = response.data;\r\n\r\n        const threads = {};\r\n\r\n        threadData.forEach((item) => {\r\n          const threadTitle = item.TopicTitle;\r\n          const threadCounter = item.NumberOfReplies || 0;\r\n\r\n          if (threadTitle) {\r\n            if (threads[threadTitle]) {\r\n              threads[threadTitle] += threadCounter;\r\n            } else {\r\n              threads[threadTitle] = threadCounter;\r\n            }\r\n          }\r\n        });\r\n\r\n        let thread = \"\";\r\n        let threadCount = 0;\r\n        for (const threadTitle in threads) {\r\n          if (threads.hasOwnProperty(threadTitle)) {\r\n            const counter = threads[threadTitle];\r\n            if (counter > threadCount) {\r\n              threadCount = counter;\r\n              thread = threadTitle;\r\n            }\r\n          }\r\n        }\r\n\r\n        const graphData = Object.keys(threads).map((threadTitle) => ({\r\n          label: threadTitle,\r\n          value: threads[threadTitle],\r\n        }));\r\n\r\n        setGraphData(graphData);\r\n        setGraphTitle(\"Most Commented Thread Posts\");\r\n        setGraphXLabel(\"Thread Title\");\r\n        setGraphYLabel(\"Number of times Commented\");\r\n\r\n        setMostThreads(thread);\r\n        setMostThreadCount(threadCount);\r\n        setSelectedMetric(\"Most Commented Thread\");\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching total active users:\", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"mt-4 mb-4\">\r\n        <h2 className=\"text-center mt-4 mb-4\">Select a Metric</h2>\r\n        <Row>\r\n          <Col>\r\n            <Button className=\"mb-2\" onClick={fetchTotalActiveUsers}>\r\n              Total Registered Users\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button className=\"mb-2\" onClick={mostBaseCocktailSearched}>\r\n              Most Searched Base Cocktail Recipe\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button className=\"mb-2\" onClick={mostUserCocktailSearched}>\r\n              Most Searched User Cocktail Recipe\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button className=\"mb-2\" onClick={mostCommentedThread}>\r\n              Most Commented Thread\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      <Container>\r\n        <BarGraph\r\n          graphData={graphData}\r\n          title={graphTitle}\r\n          xLabel={graphXLabel}\r\n          yLabel={graphYLabel}\r\n        />\r\n      </Container>\r\n      <Container className=\"text-center mt-4 mb-4\">\r\n        {selectedMetric === \"Total Registered Users\" && (\r\n          <>\r\n            <p className=\"fs-1\">\r\n              Month with the highest user account creations:\r\n              <span className=\"fw-bold fs-1 bold-text margin-left-10\">\r\n                {highestMonth}\r\n              </span>\r\n            </p>\r\n            <p className=\"fs-1\">\r\n              Count:\r\n              <span className=\"fw-bold fs-1 bold-text margin-left-10\">\r\n                {highestMonthCount}\r\n              </span>\r\n            </p>\r\n          </>\r\n        )}\r\n\r\n        {selectedMetric === \"Most Searched Base Cocktail Recipes\" && (\r\n          <>\r\n            <p className=\"fs-1\">\r\n              Most Searched Base Cocktail Recipe:\r\n              <span className=\"fw-bold fs-1 bold-text margin-left-10\">\r\n                {mostSearchedCocktail}\r\n              </span>\r\n            </p>\r\n            <p className=\"fs-1\">\r\n              Count:\r\n              <span className=\"fw-bold fs-1 bold-text margin-left-10\">\r\n                {mostSearchedCounter}\r\n              </span>\r\n            </p>\r\n          </>\r\n        )}\r\n\r\n        {selectedMetric === \"Most Searched User Cocktail Recipes\" && (\r\n          <>\r\n            <p className=\"fs-1\">\r\n              Most Searched User Cocktail Recipe:\r\n              <span className=\"fw-bold fs-1 bold-text margin-left-10\">\r\n                {mostUserSearchedCocktail}\r\n              </span>\r\n            </p>\r\n            <p className=\"fs-1\">\r\n              Count:\r\n              <span className=\"fw-bold fs-1 bold-text margin-left-10\">\r\n                {mostUserSearchedCounter}\r\n              </span>\r\n            </p>\r\n          </>\r\n        )}\r\n\r\n        {selectedMetric === \"Most Commented Thread\" && (\r\n          <>\r\n            <p className=\"fs-1\">\r\n              Highest commented Thread Title:\r\n              <span className=\"fw-bold fs-1 bold-text margin-left-10\">\r\n                {mostThreads}\r\n              </span>\r\n            </p>\r\n            <p className=\"fs-1\">\r\n              Number of times commented:\r\n              <span className=\"fw-bold fs-1 bold-text margin-left-10\">\r\n                {mostThreadCount}\r\n              </span>\r\n            </p>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MetricsPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}