{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ioter\\\\OneDrive\\\\Desktop\\\\projects\\\\night_in\\\\frontend\\\\src\\\\components\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // Variable to hold the loggedIn status of a given user\n  const [loggedIn, setLoggedIn] = useState(false);\n  // Variable to hold the logged in UserName\n  const [loggedInUsername, setLoggedInUsername] = useState(\"\");\n  // Variable to hold the logged in UserID\n  const [loggedInUserId, setLoggedInUserId] = useState(\"\");\n  // Variable to hold the logged in UserType\n  const [loggedInUserType, setLoggedInUserType] = useState(\"\");\n\n  /**\r\n   * Check for saved authentication data in local storage during mounting\r\n   */\n  useEffect(() => {\n    const savedUsername = localStorage.getItem(\"username\");\n    const savedUserId = localStorage.getItem(\"userId\");\n    const savedUserType = localStorage.getItem(\"userType\");\n    if (savedUsername) {\n      setLoggedInUsername(savedUsername);\n      setLoggedInUserId(savedUserId || \"\");\n      setLoggedInUserType(savedUserType || \"G\");\n      setLoggedIn(true);\n    }\n  }, []);\n\n  /**\r\n   * Log a user in and store authentication data in local storage\r\n   * @param {string} username - The UserName of the user\r\n   * @param {string} userId - The UserID of the user\r\n   * @param {string} userType - The UserType\r\n   */\n  const login = (username, userId, userType) => {\n    localStorage.setItem(\"username\", username);\n    localStorage.setItem(\"userId\", userId);\n    localStorage.setItem(\"userType\", userType);\n    setLoggedInUsername(username);\n    setLoggedInUserId(userId);\n    setLoggedInUserType(userType);\n    setLoggedIn(true);\n  };\n\n  /**\r\n   * Log a user out and remove authentication data from local storage\r\n   */\n  const logout = () => {\n    localStorage.removeItem(\"username\");\n    localStorage.removeItem(\"userId\");\n    localStorage.removeItem(\"userType\");\n    setLoggedInUsername(\"\");\n    setLoggedInUserId(\"\");\n    setLoggedInUserType(\"\");\n    setLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      loggedIn,\n      loggedInUsername,\n      loggedInUserId,\n      loggedInUserType,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"lZo8qBlIfU2VQaUgyT6eiasJG5c=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","loggedIn","setLoggedIn","loggedInUsername","setLoggedInUsername","loggedInUserId","setLoggedInUserId","loggedInUserType","setLoggedInUserType","savedUsername","localStorage","getItem","savedUserId","savedUserType","login","username","userId","userType","setItem","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/ioter/OneDrive/Desktop/projects/night_in/frontend/src/components/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  // Variable to hold the loggedIn status of a given user\r\n  const [loggedIn, setLoggedIn] = useState(false);\r\n  // Variable to hold the logged in UserName\r\n  const [loggedInUsername, setLoggedInUsername] = useState(\"\");\r\n  // Variable to hold the logged in UserID\r\n  const [loggedInUserId, setLoggedInUserId] = useState(\"\");\r\n  // Variable to hold the logged in UserType\r\n  const [loggedInUserType, setLoggedInUserType] = useState(\"\");\r\n\r\n  /**\r\n   * Check for saved authentication data in local storage during mounting\r\n   */\r\n  useEffect(() => {\r\n    const savedUsername = localStorage.getItem(\"username\");\r\n    const savedUserId = localStorage.getItem(\"userId\");\r\n    const savedUserType = localStorage.getItem(\"userType\");\r\n\r\n    if (savedUsername) {\r\n      setLoggedInUsername(savedUsername);\r\n      setLoggedInUserId(savedUserId || \"\");\r\n      setLoggedInUserType(savedUserType || \"G\");\r\n      setLoggedIn(true);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Log a user in and store authentication data in local storage\r\n   * @param {string} username - The UserName of the user\r\n   * @param {string} userId - The UserID of the user\r\n   * @param {string} userType - The UserType\r\n   */\r\n  const login = (username, userId, userType) => {\r\n    localStorage.setItem(\"username\", username);\r\n    localStorage.setItem(\"userId\", userId);\r\n    localStorage.setItem(\"userType\", userType);\r\n    setLoggedInUsername(username);\r\n    setLoggedInUserId(userId);\r\n    setLoggedInUserType(userType);\r\n    setLoggedIn(true);\r\n  };\r\n\r\n  /**\r\n   * Log a user out and remove authentication data from local storage\r\n   */\r\n  const logout = () => {\r\n    localStorage.removeItem(\"username\");\r\n    localStorage.removeItem(\"userId\");\r\n    localStorage.removeItem(\"userType\");\r\n    setLoggedInUsername(\"\");\r\n    setLoggedInUserId(\"\");\r\n    setLoggedInUserType(\"\");\r\n    setLoggedIn(false);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        loggedIn,\r\n        loggedInUsername,\r\n        loggedInUserId,\r\n        loggedInUserType,\r\n        login,\r\n        logout,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC/C;EACA,MAAM,CAACU,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5D;EACA,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxD;EACA,MAAM,CAACc,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;;EAE5D;AACF;AACA;EACEC,SAAS,CAAC,MAAM;IACd,MAAMe,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACtD,MAAMC,WAAW,GAAGF,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAClD,MAAME,aAAa,GAAGH,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAEtD,IAAIF,aAAa,EAAE;MACjBL,mBAAmB,CAACK,aAAa,CAAC;MAClCH,iBAAiB,CAACM,WAAW,IAAI,EAAE,CAAC;MACpCJ,mBAAmB,CAACK,aAAa,IAAI,GAAG,CAAC;MACzCX,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;AACA;AACA;AACA;EACE,MAAMY,KAAK,GAAGA,CAACC,QAAQ,EAAEC,MAAM,EAAEC,QAAQ,KAAK;IAC5CP,YAAY,CAACQ,OAAO,CAAC,UAAU,EAAEH,QAAQ,CAAC;IAC1CL,YAAY,CAACQ,OAAO,CAAC,QAAQ,EAAEF,MAAM,CAAC;IACtCN,YAAY,CAACQ,OAAO,CAAC,UAAU,EAAED,QAAQ,CAAC;IAC1Cb,mBAAmB,CAACW,QAAQ,CAAC;IAC7BT,iBAAiB,CAACU,MAAM,CAAC;IACzBR,mBAAmB,CAACS,QAAQ,CAAC;IAC7Bf,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC;;EAED;AACF;AACA;EACE,MAAMiB,MAAM,GAAGA,CAAA,KAAM;IACnBT,YAAY,CAACU,UAAU,CAAC,UAAU,CAAC;IACnCV,YAAY,CAACU,UAAU,CAAC,QAAQ,CAAC;IACjCV,YAAY,CAACU,UAAU,CAAC,UAAU,CAAC;IACnChB,mBAAmB,CAAC,EAAE,CAAC;IACvBE,iBAAiB,CAAC,EAAE,CAAC;IACrBE,mBAAmB,CAAC,EAAE,CAAC;IACvBN,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,oBACEN,OAAA,CAACC,WAAW,CAACwB,QAAQ;IACnBC,KAAK,EAAE;MACLrB,QAAQ;MACRE,gBAAgB;MAChBE,cAAc;MACdE,gBAAgB;MAChBO,KAAK;MACLK;IACF,CAAE;IAAApB,QAAA,EAEDA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC1B,EAAA,CArEWF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAuEzB,OAAO,MAAM8B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAOrC,UAAU,CAACK,WAAW,CAAC;AAChC,CAAC;AAACgC,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}